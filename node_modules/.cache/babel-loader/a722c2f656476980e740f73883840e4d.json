{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DinhNgo\\\\Desktop\\\\BookingMovie\\\\src\\\\container\\\\AdminTemplate\\\\Dashboard\\\\QuanLiLichChieu.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Grid, makeStyles } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker } from \"@material-ui/pickers\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FETCH_THONG_TIN_CUM_RAP_THEO_HE_THONG_REQUESTS_SAGA, FETCH_THONG_TIN_LICH_CHIEU_PHIM_REQUESTS_SAGA } from \"../../HomeTemplate/Home/modules/redux/constants\";\nimport { POST_TAO_LICH_CHIEU_REQUESTED_SAGA } from \"./modules/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  }\n}));\n\nconst QuanLiLichChieu = () => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [selectedDate, handleDateChange] = useState(new Date());\n  const movieList = useSelector(state => state.MovieReducer.movieList);\n  const heThongRap = useSelector(state => state.MovieReducer.theater);\n  const tenRap = useSelector(state => state.MovieReducer.thongTinCumRap);\n  const [infoLichChieu, setInfoLichChieu] = useState({\n    maPhim: \"\",\n    phim: \"\",\n    cumRap: \"\",\n    tenCumRap: \"\",\n    maRap: \"\",\n    tenMaRap: \"\",\n    ngayChieu: \"\",\n    ngayChieuGioChieu: new Date(),\n    giaVe: \"75000\"\n  }); //Khi user vừa chọn trong ô textfield đầu tiên thì sẽ\n  // disppatch thông tin phim đó lên để lấy data cho các ô khác\n  // (mặc định chỉ có mỗi ô đầu có dữ liệu nên phải đợi user chọn phim mới lấy đc info)\n\n  const handleDispatchMovie = phim => {\n    let findMaPhim = movieList.filter(movie => {\n      return movie.tenPhim === phim;\n    });\n    let maPhimBlock = findMaPhim[0].maPhim;\n    infoLichChieu.maPhim = findMaPhim[0].maPhim;\n    dispatch({\n      type: FETCH_THONG_TIN_LICH_CHIEU_PHIM_REQUESTS_SAGA,\n      payload: maPhimBlock\n    });\n  };\n\n  const handleDispatchTenCumRap = tenHeThongRap => {\n    let findMaHeThongRap = heThongRap.filter(rap => {\n      return rap.tenHeThongRap === tenHeThongRap;\n    });\n    let maHeThongRap = findMaHeThongRap[0].maHeThongRap;\n    infoLichChieu.cumRap = findMaHeThongRap[0].maHeThongRap;\n    dispatch({\n      type: FETCH_THONG_TIN_CUM_RAP_THEO_HE_THONG_REQUESTS_SAGA,\n      payload: maHeThongRap\n    });\n  };\n\n  const handleDispatchLichChieu = () => {\n    if (infoLichChieu.ngayChieuGioChieu !== \"\") {\n      const optionsDate = {\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\"\n      };\n      const optionsTime = {\n        hour12: false,\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\"\n      };\n      const date = selectedDate.toLocaleDateString(\"en-GB\", optionsDate);\n      const time = selectedDate.toLocaleTimeString(\"en-GB\", optionsTime);\n      const {\n        maPhim,\n        maRap,\n        giaVe\n      } = infoLichChieu;\n      let ngayChieuGioChieu = date + \" \" + time;\n      const payload = {\n        maPhim: parseInt(maPhim),\n        ngayChieuGioChieu,\n        maRap: parseInt(maRap),\n        giaVe: parseInt(giaVe)\n      };\n      dispatch({\n        type: POST_TAO_LICH_CHIEU_REQUESTED_SAGA,\n        payload\n      });\n    }\n  };\n\n  const renderTenPhim = () => {\n    if (movieList) {\n      let arr = movieList.map(item => {\n        return item.tenPhim;\n      });\n      return /*#__PURE__*/_jsxDEV(Autocomplete, {\n        classes: classes // size=\"small\"\n        ,\n        fullWidth: \"true\",\n        options: arr,\n        value: infoLichChieu.phim,\n        getOptionLabel: option => option //On change để khi người dùng thay đổi thông tin liền gọi hàm handleDispatchMovie để fetch dữ liệu về.\n        ,\n        onChange: (event, newValue) => {\n          // Chặn dispatch khi không có dữ liệu\n          if (newValue == null) {\n            setInfoLichChieu({ ...infoLichChieu,\n              maPhim: \"\",\n              phim: \"\"\n            });\n            return;\n          }\n\n          handleDispatchMovie(newValue);\n          setInfoLichChieu({ ...infoLichChieu,\n            phim: newValue\n          });\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          id: \"phim\",\n          label: \"Phim\",\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  const renderCumRap = () => {\n    let arr = heThongRap.map(cumRap => {\n      return cumRap.tenHeThongRap;\n    });\n    return /*#__PURE__*/_jsxDEV(Autocomplete, {\n      classes: classes,\n      fullWidth: \"true\",\n      options: arr,\n      value: infoLichChieu.cumRap,\n      getOptionLabel: option => option //On change để khi người dùng thay đổi thông tin liền gọi hàm handleDispatchMovie để fetch dữ liệu về.\n      ,\n      onChange: (event, newValue) => {\n        if (newValue == null) {\n          setInfoLichChieu({ ...infoLichChieu,\n            cumRap: \"\",\n            tenCumRap: \"\",\n            maRap: \"\"\n          });\n          return;\n        }\n\n        handleDispatchTenCumRap(newValue);\n        setInfoLichChieu({ ...infoLichChieu,\n          cumRap: newValue,\n          tenCumRap: \"\"\n        });\n      },\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        id: \"cumRap\",\n        label: \"C\\u1EE5m R\\u1EA1p\",\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderTenRap = () => {\n    if (tenRap && infoLichChieu.cumRap) {\n      let arr = tenRap.map(ten => {\n        return ten.tenCumRap;\n      });\n      return /*#__PURE__*/_jsxDEV(Autocomplete, {\n        classes: classes,\n        fullWidth: \"true\",\n        options: arr,\n        value: infoLichChieu.tenCumRap,\n        getOptionLabel: option => option //On change để khi người dùng thay đổi thông tin liền gọi hàm handleDispatchMovie để fetch dữ liệu về.\n        ,\n        onChange: (event, newValue) => {\n          if (newValue == null) {\n            setInfoLichChieu({ ...infoLichChieu,\n              tenCumRap: \"\"\n            });\n            return;\n          }\n\n          setInfoLichChieu({ ...infoLichChieu,\n            tenCumRap: newValue,\n            maRap: \"\"\n          }); // findMaRap(newValue);\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          id: \"tenCumRap\",\n          label: \"T\\xEAn C\\u1EE5m R\\u1EA1p\",\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Autocomplete, {\n        classes: classes,\n        fullWidth: \"true\",\n        value: infoLichChieu.tenCumRap,\n        options: [\"Vui lòng chọn cụm rạp\"],\n        getOptionDisabled: option => true,\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          id: \"tenCumRap\",\n          label: \"T\\xEAn R\\u1EA1p\",\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this);\n    }\n  }; //Vì thằng autocomplete chỉ cho render mà tên hoặc mã k được render ra object.tên\n  //nên phải làm thêm 1 hàm để truy xuất khi có dữ liệu tên rạp thì trigger hàm\n  // tìm mã rạp\n\n\n  const findMaRap = tenMaRap => {\n    if (tenRap) {\n      let maRapContainer = tenRap.filter(rap => {\n        return rap.tenCumRap === infoLichChieu.tenCumRap;\n      });\n      let maRapArr = maRapContainer[0].danhSachRap.filter(maRap => {\n        return maRap.tenRap === tenMaRap;\n      });\n      setInfoLichChieu({ ...infoLichChieu,\n        tenMaRap,\n        maRap: maRapArr[0].maRap\n      });\n    }\n  };\n\n  const renderTenMaRap = () => {\n    if (tenRap && infoLichChieu.tenCumRap !== \"\") {\n      let maRapContainer = tenRap.filter(rap => {\n        return rap.tenCumRap === infoLichChieu.tenCumRap;\n      });\n      let maRapArr = maRapContainer[0].danhSachRap.map(maRap => {\n        return maRap.tenRap;\n      });\n      return /*#__PURE__*/_jsxDEV(Autocomplete, {\n        classes: classes,\n        fullWidth: \"true\",\n        options: maRapArr,\n        value: infoLichChieu.tenMaRap,\n        getOptionLabel: option => option //On change để khi người dùng thay đổi thông tin liền gọi hàm handleDispatchMovie để fetch dữ liệu về.\n        ,\n        onChange: (event, newValue) => {\n          if (newValue == null) {\n            setInfoLichChieu({ ...infoLichChieu,\n              tenMaRap: \"\"\n            });\n            return;\n          } // setInfoLichChieu({\n          //   ...infoLichChieu,\n          //   tenMaRap: newValue,\n          // });\n\n\n          findMaRap(newValue);\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          id: \"tenMaRap\",\n          label: \"T\\xEAn m\\xE3 r\\u1EA1p\",\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Autocomplete, {\n        classes: classes,\n        fullWidth: \"true\",\n        value: infoLichChieu.maRap,\n        options: [\"Vui lòng chọn cụm rạp và tên rạp\"],\n        getOptionDisabled: option => true,\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          id: \"tenMaRap\",\n          label: \"T\\xEAn m\\xE3 r\\u1EA1p\",\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  let giaTienArr = [\"75000\", \"90000\", \"120000\", \"150000\"];\n\n  const renderGiaVe = () => {\n    return /*#__PURE__*/_jsxDEV(Autocomplete, {\n      classes: classes,\n      fullWidth: \"true\",\n      value: infoLichChieu.giaVe,\n      options: giaTienArr,\n      getOptionLabel: option => option,\n      onChange: (event, newValue) => {\n        if (newValue == null) {\n          setInfoLichChieu({ ...infoLichChieu,\n            giaVe: \"\"\n          });\n          return;\n        }\n\n        setInfoLichChieu({ ...infoLichChieu,\n          giaVe: newValue\n        });\n      },\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        id: \"giaVe\",\n        label: \"Gi\\xE1 v\\xE9\",\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"1rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: renderTenPhim()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: renderTenMaRap()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: renderCumRap()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n          utils: DateFnsUtils,\n          children: /*#__PURE__*/_jsxDEV(KeyboardDateTimePicker, {\n            inputVariant: \"outlined\",\n            fullWidth: \"true\",\n            ampm: false,\n            label: \"Su\\u1EA5t chi\\u1EBFu\",\n            value: selectedDate,\n            onChange: handleDateChange,\n            onError: console.log,\n            disablePast: true,\n            format: \"dd/MM/yyyy HH:mm:SS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: renderTenRap()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: renderGiaVe()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 8,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          fullWidth: true,\n          onClick: () => handleDispatchLichChieu(),\n          children: \"T\\u1EA1o l\\u1ECBch chi\\u1EBFu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 350,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuanLiLichChieu, \"c/MtBRWBHlzuV1wHFGF0pirvDdM=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = QuanLiLichChieu;\nexport default QuanLiLichChieu;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuanLiLichChieu\");","map":{"version":3,"sources":["C:/Users/DinhNgo/Desktop/BookingMovie/src/container/AdminTemplate/Dashboard/QuanLiLichChieu.jsx"],"names":["Button","Grid","makeStyles","React","useEffect","useState","TextField","DateFnsUtils","Autocomplete","MuiPickersUtilsProvider","KeyboardDateTimePicker","useSelector","useDispatch","FETCH_THONG_TIN_CUM_RAP_THEO_HE_THONG_REQUESTS_SAGA","FETCH_THONG_TIN_LICH_CHIEU_PHIM_REQUESTS_SAGA","POST_TAO_LICH_CHIEU_REQUESTED_SAGA","useStyles","theme","root","flexGrow","QuanLiLichChieu","classes","dispatch","selectedDate","handleDateChange","Date","movieList","state","MovieReducer","heThongRap","theater","tenRap","thongTinCumRap","infoLichChieu","setInfoLichChieu","maPhim","phim","cumRap","tenCumRap","maRap","tenMaRap","ngayChieu","ngayChieuGioChieu","giaVe","handleDispatchMovie","findMaPhim","filter","movie","tenPhim","maPhimBlock","type","payload","handleDispatchTenCumRap","tenHeThongRap","findMaHeThongRap","rap","maHeThongRap","handleDispatchLichChieu","optionsDate","year","month","day","optionsTime","hour12","hour","minute","second","date","toLocaleDateString","time","toLocaleTimeString","parseInt","renderTenPhim","arr","map","item","option","event","newValue","params","renderCumRap","renderTenRap","ten","findMaRap","maRapContainer","maRapArr","danhSachRap","renderTenMaRap","giaTienArr","renderGiaVe","padding","console","log"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,UAAvB,QAAyC,mBAAzC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,SACEC,uBADF,EAEEC,sBAFF,QAGO,sBAHP;AAIA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACEC,mDADF,EAEEC,6CAFF,QAGO,iDAHP;AAIA,SAASC,kCAAT,QAAmD,qBAAnD;;AAEA,MAAMC,SAAS,GAAGd,UAAU,CAAEe,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN;AADiC,CAAZ,CAAD,CAA5B;;AAMA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAMC,OAAO,GAAGL,SAAS,EAAzB;AACA,QAAMM,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM,CAACW,YAAD,EAAeC,gBAAf,IAAmCnB,QAAQ,CAAC,IAAIoB,IAAJ,EAAD,CAAjD;AACA,QAAMC,SAAS,GAAGf,WAAW,CAAEgB,KAAD,IAAWA,KAAK,CAACC,YAAN,CAAmBF,SAA/B,CAA7B;AACA,QAAMG,UAAU,GAAGlB,WAAW,CAAEgB,KAAD,IAAWA,KAAK,CAACC,YAAN,CAAmBE,OAA/B,CAA9B;AACA,QAAMC,MAAM,GAAGpB,WAAW,CAAEgB,KAAD,IAAWA,KAAK,CAACC,YAAN,CAAmBI,cAA/B,CAA1B;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoC7B,QAAQ,CAAC;AACjD8B,IAAAA,MAAM,EAAE,EADyC;AAEjDC,IAAAA,IAAI,EAAE,EAF2C;AAGjDC,IAAAA,MAAM,EAAE,EAHyC;AAIjDC,IAAAA,SAAS,EAAE,EAJsC;AAKjDC,IAAAA,KAAK,EAAE,EAL0C;AAMjDC,IAAAA,QAAQ,EAAE,EANuC;AAOjDC,IAAAA,SAAS,EAAE,EAPsC;AAQjDC,IAAAA,iBAAiB,EAAE,IAAIjB,IAAJ,EAR8B;AASjDkB,IAAAA,KAAK,EAAE;AAT0C,GAAD,CAAlD,CAP4B,CAmB5B;AACA;AACA;;AAEA,QAAMC,mBAAmB,GAAIR,IAAD,IAAU;AACpC,QAAIS,UAAU,GAAGnB,SAAS,CAACoB,MAAV,CAAkBC,KAAD,IAAW;AAC3C,aAAOA,KAAK,CAACC,OAAN,KAAkBZ,IAAzB;AACD,KAFgB,CAAjB;AAGA,QAAIa,WAAW,GAAGJ,UAAU,CAAC,CAAD,CAAV,CAAcV,MAAhC;AACAF,IAAAA,aAAa,CAACE,MAAd,GAAuBU,UAAU,CAAC,CAAD,CAAV,CAAcV,MAArC;AACAb,IAAAA,QAAQ,CAAC;AACP4B,MAAAA,IAAI,EAAEpC,6CADC;AAEPqC,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GAVD;;AAYA,QAAMG,uBAAuB,GAAIC,aAAD,IAAmB;AACjD,QAAIC,gBAAgB,GAAGzB,UAAU,CAACiB,MAAX,CAAmBS,GAAD,IAAS;AAChD,aAAOA,GAAG,CAACF,aAAJ,KAAsBA,aAA7B;AACD,KAFsB,CAAvB;AAGA,QAAIG,YAAY,GAAGF,gBAAgB,CAAC,CAAD,CAAhB,CAAoBE,YAAvC;AACAvB,IAAAA,aAAa,CAACI,MAAd,GAAuBiB,gBAAgB,CAAC,CAAD,CAAhB,CAAoBE,YAA3C;AACAlC,IAAAA,QAAQ,CAAC;AACP4B,MAAAA,IAAI,EAAErC,mDADC;AAEPsC,MAAAA,OAAO,EAAEK;AAFF,KAAD,CAAR;AAID,GAVD;;AAYA,QAAMC,uBAAuB,GAAG,MAAM;AACpC,QAAIxB,aAAa,CAACS,iBAAd,KAAoC,EAAxC,EAA4C;AAC1C,YAAMgB,WAAW,GAAG;AAClBC,QAAAA,IAAI,EAAE,SADY;AAElBC,QAAAA,KAAK,EAAE,SAFW;AAGlBC,QAAAA,GAAG,EAAE;AAHa,OAApB;AAKA,YAAMC,WAAW,GAAG;AAClBC,QAAAA,MAAM,EAAE,KADU;AAElBC,QAAAA,IAAI,EAAE,SAFY;AAGlBC,QAAAA,MAAM,EAAE,SAHU;AAIlBC,QAAAA,MAAM,EAAE;AAJU,OAApB;AAMA,YAAMC,IAAI,GAAG5C,YAAY,CAAC6C,kBAAb,CAAgC,OAAhC,EAAyCV,WAAzC,CAAb;AACA,YAAMW,IAAI,GAAG9C,YAAY,CAAC+C,kBAAb,CAAgC,OAAhC,EAAyCR,WAAzC,CAAb;AACA,YAAM;AAAE3B,QAAAA,MAAF;AAAUI,QAAAA,KAAV;AAAiBI,QAAAA;AAAjB,UAA2BV,aAAjC;AACA,UAAIS,iBAAiB,GAAGyB,IAAI,GAAG,GAAP,GAAaE,IAArC;AACA,YAAMlB,OAAO,GAAG;AACdhB,QAAAA,MAAM,EAAEoC,QAAQ,CAACpC,MAAD,CADF;AAEdO,QAAAA,iBAFc;AAGdH,QAAAA,KAAK,EAAEgC,QAAQ,CAAChC,KAAD,CAHD;AAIdI,QAAAA,KAAK,EAAE4B,QAAQ,CAAC5B,KAAD;AAJD,OAAhB;AAMArB,MAAAA,QAAQ,CAAC;AACP4B,QAAAA,IAAI,EAAEnC,kCADC;AAEPoC,QAAAA;AAFO,OAAD,CAAR;AAID;AACF,GA5BD;;AA8BA,QAAMqB,aAAa,GAAG,MAAM;AAC1B,QAAI9C,SAAJ,EAAe;AACb,UAAI+C,GAAG,GAAG/C,SAAS,CAACgD,GAAV,CAAeC,IAAD,IAAU;AAChC,eAAOA,IAAI,CAAC3B,OAAZ;AACD,OAFS,CAAV;AAGA,0BACE,QAAC,YAAD;AACE,QAAA,OAAO,EAAE3B,OADX,CAEE;AAFF;AAGE,QAAA,SAAS,EAAC,MAHZ;AAIE,QAAA,OAAO,EAAEoD,GAJX;AAKE,QAAA,KAAK,EAAExC,aAAa,CAACG,IALvB;AAME,QAAA,cAAc,EAAGwC,MAAD,IAAYA,MAN9B,CAOE;AAPF;AAQE,QAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC7B;AACA,cAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpB5C,YAAAA,gBAAgB,CAAC,EACf,GAAGD,aADY;AAEfE,cAAAA,MAAM,EAAE,EAFO;AAGfC,cAAAA,IAAI,EAAE;AAHS,aAAD,CAAhB;AAKA;AACD;;AACDQ,UAAAA,mBAAmB,CAACkC,QAAD,CAAnB;AACA5C,UAAAA,gBAAgB,CAAC,EACf,GAAGD,aADY;AAEfG,YAAAA,IAAI,EAAE0C;AAFS,WAAD,CAAhB;AAID,SAvBH;AAwBE,QAAA,WAAW,EAAGC,MAAD,iBACX,QAAC,SAAD,OAAeA,MAAf;AAAuB,UAAA,EAAE,EAAC,MAA1B;AAAiC,UAAA,KAAK,EAAC,MAAvC;AAA8C,UAAA,OAAO,EAAC;AAAtD;AAAA;AAAA;AAAA;AAAA;AAzBJ;AAAA;AAAA;AAAA;AAAA,cADF;AA8BD;AACF,GApCD;;AAsCA,QAAMC,YAAY,GAAG,MAAM;AACzB,QAAIP,GAAG,GAAG5C,UAAU,CAAC6C,GAAX,CAAgBrC,MAAD,IAAY;AACnC,aAAOA,MAAM,CAACgB,aAAd;AACD,KAFS,CAAV;AAGA,wBACE,QAAC,YAAD;AACE,MAAA,OAAO,EAAEhC,OADX;AAEE,MAAA,SAAS,EAAC,MAFZ;AAGE,MAAA,OAAO,EAAEoD,GAHX;AAIE,MAAA,KAAK,EAAExC,aAAa,CAACI,MAJvB;AAKE,MAAA,cAAc,EAAGuC,MAAD,IAAYA,MAL9B,CAME;AANF;AAOE,MAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC7B,YAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpB5C,UAAAA,gBAAgB,CAAC,EACf,GAAGD,aADY;AAEfI,YAAAA,MAAM,EAAE,EAFO;AAGfC,YAAAA,SAAS,EAAE,EAHI;AAIfC,YAAAA,KAAK,EAAE;AAJQ,WAAD,CAAhB;AAMA;AACD;;AACDa,QAAAA,uBAAuB,CAAC0B,QAAD,CAAvB;AACA5C,QAAAA,gBAAgB,CAAC,EACf,GAAGD,aADY;AAEfI,UAAAA,MAAM,EAAEyC,QAFO;AAGfxC,UAAAA,SAAS,EAAE;AAHI,SAAD,CAAhB;AAKD,OAvBH;AAwBE,MAAA,WAAW,EAAGyC,MAAD,iBACX,QAAC,SAAD,OACMA,MADN;AAEE,QAAA,EAAE,EAAC,QAFL;AAGE,QAAA,KAAK,EAAC,mBAHR;AAIE,QAAA,OAAO,EAAC;AAJV;AAAA;AAAA;AAAA;AAAA;AAzBJ;AAAA;AAAA;AAAA;AAAA,YADF;AAmCD,GAvCD;;AAyCA,QAAME,YAAY,GAAG,MAAM;AACzB,QAAIlD,MAAM,IAAIE,aAAa,CAACI,MAA5B,EAAoC;AAClC,UAAIoC,GAAG,GAAG1C,MAAM,CAAC2C,GAAP,CAAYQ,GAAD,IAAS;AAC5B,eAAOA,GAAG,CAAC5C,SAAX;AACD,OAFS,CAAV;AAIA,0BACE,QAAC,YAAD;AACE,QAAA,OAAO,EAAEjB,OADX;AAEE,QAAA,SAAS,EAAC,MAFZ;AAGE,QAAA,OAAO,EAAEoD,GAHX;AAIE,QAAA,KAAK,EAAExC,aAAa,CAACK,SAJvB;AAKE,QAAA,cAAc,EAAGsC,MAAD,IAAYA,MAL9B,CAME;AANF;AAOE,QAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC7B,cAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpB5C,YAAAA,gBAAgB,CAAC,EACf,GAAGD,aADY;AAEfK,cAAAA,SAAS,EAAE;AAFI,aAAD,CAAhB;AAIA;AACD;;AACDJ,UAAAA,gBAAgB,CAAC,EACf,GAAGD,aADY;AAEfK,YAAAA,SAAS,EAAEwC,QAFI;AAGfvC,YAAAA,KAAK,EAAE;AAHQ,WAAD,CAAhB,CAR6B,CAa7B;AACD,SArBH;AAsBE,QAAA,WAAW,EAAGwC,MAAD,iBACX,QAAC,SAAD,OACMA,MADN;AAEE,UAAA,EAAE,EAAC,WAFL;AAGE,UAAA,KAAK,EAAC,0BAHR;AAIE,UAAA,OAAO,EAAC;AAJV;AAAA;AAAA;AAAA;AAAA;AAvBJ;AAAA;AAAA;AAAA;AAAA,cADF;AAiCD,KAtCD,MAsCO;AACL,0BACE,QAAC,YAAD;AACE,QAAA,OAAO,EAAE1D,OADX;AAEE,QAAA,SAAS,EAAC,MAFZ;AAGE,QAAA,KAAK,EAAEY,aAAa,CAACK,SAHvB;AAIE,QAAA,OAAO,EAAE,CAAC,uBAAD,CAJX;AAKE,QAAA,iBAAiB,EAAGsC,MAAD,IAAY,IALjC;AAME,QAAA,WAAW,EAAGG,MAAD,iBACX,QAAC,SAAD,OACMA,MADN;AAEE,UAAA,EAAE,EAAC,WAFL;AAGE,UAAA,KAAK,EAAC,iBAHR;AAIE,UAAA,OAAO,EAAC;AAJV;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,cADF;AAiBD;AACF,GA1DD,CA5J4B,CAwN5B;AACA;AACA;;;AACA,QAAMI,SAAS,GAAI3C,QAAD,IAAc;AAC9B,QAAIT,MAAJ,EAAY;AACV,UAAIqD,cAAc,GAAGrD,MAAM,CAACe,MAAP,CAAeS,GAAD,IAAS;AAC1C,eAAOA,GAAG,CAACjB,SAAJ,KAAkBL,aAAa,CAACK,SAAvC;AACD,OAFoB,CAArB;AAGA,UAAI+C,QAAQ,GAAGD,cAAc,CAAC,CAAD,CAAd,CAAkBE,WAAlB,CAA8BxC,MAA9B,CAAsCP,KAAD,IAAW;AAC7D,eAAOA,KAAK,CAACR,MAAN,KAAiBS,QAAxB;AACD,OAFc,CAAf;AAGAN,MAAAA,gBAAgB,CAAC,EACf,GAAGD,aADY;AAEfO,QAAAA,QAFe;AAGfD,QAAAA,KAAK,EAAE8C,QAAQ,CAAC,CAAD,CAAR,CAAY9C;AAHJ,OAAD,CAAhB;AAKD;AACF,GAdD;;AAgBA,QAAMgD,cAAc,GAAG,MAAM;AAC3B,QAAIxD,MAAM,IAAIE,aAAa,CAACK,SAAd,KAA4B,EAA1C,EAA8C;AAC5C,UAAI8C,cAAc,GAAGrD,MAAM,CAACe,MAAP,CAAeS,GAAD,IAAS;AAC1C,eAAOA,GAAG,CAACjB,SAAJ,KAAkBL,aAAa,CAACK,SAAvC;AACD,OAFoB,CAArB;AAGA,UAAI+C,QAAQ,GAAGD,cAAc,CAAC,CAAD,CAAd,CAAkBE,WAAlB,CAA8BZ,GAA9B,CAAmCnC,KAAD,IAAW;AAC1D,eAAOA,KAAK,CAACR,MAAb;AACD,OAFc,CAAf;AAGA,0BACE,QAAC,YAAD;AACE,QAAA,OAAO,EAAEV,OADX;AAEE,QAAA,SAAS,EAAC,MAFZ;AAGE,QAAA,OAAO,EAAEgE,QAHX;AAIE,QAAA,KAAK,EAAEpD,aAAa,CAACO,QAJvB;AAKE,QAAA,cAAc,EAAGoC,MAAD,IAAYA,MAL9B,CAME;AANF;AAOE,QAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC7B,cAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpB5C,YAAAA,gBAAgB,CAAC,EACf,GAAGD,aADY;AAEfO,cAAAA,QAAQ,EAAE;AAFK,aAAD,CAAhB;AAIA;AACD,WAP4B,CAQ7B;AACA;AACA;AACA;;;AACA2C,UAAAA,SAAS,CAACL,QAAD,CAAT;AACD,SApBH;AAqBE,QAAA,WAAW,EAAGC,MAAD,iBACX,QAAC,SAAD,OACMA,MADN;AAEE,UAAA,EAAE,EAAC,UAFL;AAGE,UAAA,KAAK,EAAC,uBAHR;AAIE,UAAA,OAAO,EAAC;AAJV;AAAA;AAAA;AAAA;AAAA;AAtBJ;AAAA;AAAA;AAAA;AAAA,cADF;AAgCD,KAvCD,MAuCO;AACL,0BACE,QAAC,YAAD;AACE,QAAA,OAAO,EAAE1D,OADX;AAEE,QAAA,SAAS,EAAC,MAFZ;AAGE,QAAA,KAAK,EAAEY,aAAa,CAACM,KAHvB;AAIE,QAAA,OAAO,EAAE,CAAC,kCAAD,CAJX;AAKE,QAAA,iBAAiB,EAAGqC,MAAD,IAAY,IALjC;AAME,QAAA,WAAW,EAAGG,MAAD,iBACX,QAAC,SAAD,OACMA,MADN;AAEE,UAAA,EAAE,EAAC,UAFL;AAGE,UAAA,KAAK,EAAC,uBAHR;AAIE,UAAA,OAAO,EAAC;AAJV;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,cADF;AAiBD;AACF,GA3DD;;AA6DA,MAAIS,UAAU,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,EAA6B,QAA7B,CAAjB;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACxB,wBACE,QAAC,YAAD;AACE,MAAA,OAAO,EAAEpE,OADX;AAEE,MAAA,SAAS,EAAC,MAFZ;AAGE,MAAA,KAAK,EAAEY,aAAa,CAACU,KAHvB;AAIE,MAAA,OAAO,EAAE6C,UAJX;AAKE,MAAA,cAAc,EAAGZ,MAAD,IAAYA,MAL9B;AAME,MAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC7B,YAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpB5C,UAAAA,gBAAgB,CAAC,EACf,GAAGD,aADY;AAEfU,YAAAA,KAAK,EAAE;AAFQ,WAAD,CAAhB;AAIA;AACD;;AACDT,QAAAA,gBAAgB,CAAC,EACf,GAAGD,aADY;AAEfU,UAAAA,KAAK,EAAEmC;AAFQ,SAAD,CAAhB;AAID,OAlBH;AAmBE,MAAA,WAAW,EAAGC,MAAD,iBACX,QAAC,SAAD,OAAeA,MAAf;AAAuB,QAAA,EAAE,EAAC,OAA1B;AAAkC,QAAA,KAAK,EAAC,cAAxC;AAAiD,QAAA,OAAO,EAAC;AAAzD;AAAA;AAAA;AAAA;AAAA;AApBJ;AAAA;AAAA;AAAA;AAAA,YADF;AAyBD,GA1BD;;AA4BA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEW,MAAAA,OAAO,EAAE;AAAX,KAAZ;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,kBACGlB,aAAa;AADhB;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,kBACGe,cAAc;AADjB;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,kBACGP,YAAY;AADf;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,+BACE,QAAC,uBAAD;AAAyB,UAAA,KAAK,EAAEzE,YAAhC;AAAA,iCACE,QAAC,sBAAD;AACE,YAAA,YAAY,EAAC,UADf;AAEE,YAAA,SAAS,EAAC,MAFZ;AAGE,YAAA,IAAI,EAAE,KAHR;AAIE,YAAA,KAAK,EAAC,sBAJR;AAKE,YAAA,KAAK,EAAEgB,YALT;AAME,YAAA,QAAQ,EAAEC,gBANZ;AAOE,YAAA,OAAO,EAAEmE,OAAO,CAACC,GAPnB;AAQE,YAAA,WAAW,MARb;AASE,YAAA,MAAM,EAAC;AATT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,eA6BE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,kBACGX,YAAY;AADf;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,kBACGQ,WAAW;AADd;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YA7BF,eAqCE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,+BACE,QAAC,MAAD;AACE,UAAA,OAAO,EAAC,WADV;AAEE,UAAA,KAAK,EAAC,SAFR;AAGE,UAAA,SAAS,MAHX;AAIE,UAAA,OAAO,EAAE,MAAMhC,uBAAuB,EAJxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YArCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoDD,CA1XD;;GAAMrC,e;UACYJ,S,EACCJ,W,EAECD,W,EACCA,W,EACJA,W;;;KANXS,e;AA4XN,eAAeA,eAAf","sourcesContent":["import { Button, Grid, makeStyles } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDateTimePicker,\n} from \"@material-ui/pickers\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  FETCH_THONG_TIN_CUM_RAP_THEO_HE_THONG_REQUESTS_SAGA,\n  FETCH_THONG_TIN_LICH_CHIEU_PHIM_REQUESTS_SAGA,\n} from \"../../HomeTemplate/Home/modules/redux/constants\";\nimport { POST_TAO_LICH_CHIEU_REQUESTED_SAGA } from \"./modules/constants\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\n\nconst QuanLiLichChieu = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [selectedDate, handleDateChange] = useState(new Date());\n  const movieList = useSelector((state) => state.MovieReducer.movieList);\n  const heThongRap = useSelector((state) => state.MovieReducer.theater);\n  const tenRap = useSelector((state) => state.MovieReducer.thongTinCumRap);\n  const [infoLichChieu, setInfoLichChieu] = useState({\n    maPhim: \"\",\n    phim: \"\",\n    cumRap: \"\",\n    tenCumRap: \"\",\n    maRap: \"\",\n    tenMaRap: \"\",\n    ngayChieu: \"\",\n    ngayChieuGioChieu: new Date(),\n    giaVe: \"75000\",\n  });\n\n  //Khi user vừa chọn trong ô textfield đầu tiên thì sẽ\n  // disppatch thông tin phim đó lên để lấy data cho các ô khác\n  // (mặc định chỉ có mỗi ô đầu có dữ liệu nên phải đợi user chọn phim mới lấy đc info)\n\n  const handleDispatchMovie = (phim) => {\n    let findMaPhim = movieList.filter((movie) => {\n      return movie.tenPhim === phim;\n    });\n    let maPhimBlock = findMaPhim[0].maPhim;\n    infoLichChieu.maPhim = findMaPhim[0].maPhim;\n    dispatch({\n      type: FETCH_THONG_TIN_LICH_CHIEU_PHIM_REQUESTS_SAGA,\n      payload: maPhimBlock,\n    });\n  };\n\n  const handleDispatchTenCumRap = (tenHeThongRap) => {\n    let findMaHeThongRap = heThongRap.filter((rap) => {\n      return rap.tenHeThongRap === tenHeThongRap;\n    });\n    let maHeThongRap = findMaHeThongRap[0].maHeThongRap;\n    infoLichChieu.cumRap = findMaHeThongRap[0].maHeThongRap;\n    dispatch({\n      type: FETCH_THONG_TIN_CUM_RAP_THEO_HE_THONG_REQUESTS_SAGA,\n      payload: maHeThongRap,\n    });\n  };\n\n  const handleDispatchLichChieu = () => {\n    if (infoLichChieu.ngayChieuGioChieu !== \"\") {\n      const optionsDate = {\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\",\n      };\n      const optionsTime = {\n        hour12: false,\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n      };\n      const date = selectedDate.toLocaleDateString(\"en-GB\", optionsDate);\n      const time = selectedDate.toLocaleTimeString(\"en-GB\", optionsTime);\n      const { maPhim, maRap, giaVe } = infoLichChieu;\n      let ngayChieuGioChieu = date + \" \" + time;\n      const payload = {\n        maPhim: parseInt(maPhim),\n        ngayChieuGioChieu,\n        maRap: parseInt(maRap),\n        giaVe: parseInt(giaVe),\n      };\n      dispatch({\n        type: POST_TAO_LICH_CHIEU_REQUESTED_SAGA,\n        payload,\n      });\n    }\n  };\n\n  const renderTenPhim = () => {\n    if (movieList) {\n      let arr = movieList.map((item) => {\n        return item.tenPhim;\n      });\n      return (\n        <Autocomplete\n          classes={classes}\n          // size=\"small\"\n          fullWidth=\"true\"\n          options={arr}\n          value={infoLichChieu.phim}\n          getOptionLabel={(option) => option}\n          //On change để khi người dùng thay đổi thông tin liền gọi hàm handleDispatchMovie để fetch dữ liệu về.\n          onChange={(event, newValue) => {\n            // Chặn dispatch khi không có dữ liệu\n            if (newValue == null) {\n              setInfoLichChieu({\n                ...infoLichChieu,\n                maPhim: \"\",\n                phim: \"\",\n              });\n              return;\n            }\n            handleDispatchMovie(newValue);\n            setInfoLichChieu({\n              ...infoLichChieu,\n              phim: newValue,\n            });\n          }}\n          renderInput={(params) => (\n            <TextField {...params} id=\"phim\" label=\"Phim\" variant=\"outlined\" />\n          )}\n        />\n      );\n    }\n  };\n\n  const renderCumRap = () => {\n    let arr = heThongRap.map((cumRap) => {\n      return cumRap.tenHeThongRap;\n    });\n    return (\n      <Autocomplete\n        classes={classes}\n        fullWidth=\"true\"\n        options={arr}\n        value={infoLichChieu.cumRap}\n        getOptionLabel={(option) => option}\n        //On change để khi người dùng thay đổi thông tin liền gọi hàm handleDispatchMovie để fetch dữ liệu về.\n        onChange={(event, newValue) => {\n          if (newValue == null) {\n            setInfoLichChieu({\n              ...infoLichChieu,\n              cumRap: \"\",\n              tenCumRap: \"\",\n              maRap: \"\",\n            });\n            return;\n          }\n          handleDispatchTenCumRap(newValue);\n          setInfoLichChieu({\n            ...infoLichChieu,\n            cumRap: newValue,\n            tenCumRap: \"\",\n          });\n        }}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            id=\"cumRap\"\n            label=\"Cụm Rạp\"\n            variant=\"outlined\"\n          />\n        )}\n      />\n    );\n  };\n\n  const renderTenRap = () => {\n    if (tenRap && infoLichChieu.cumRap) {\n      let arr = tenRap.map((ten) => {\n        return ten.tenCumRap;\n      });\n\n      return (\n        <Autocomplete\n          classes={classes}\n          fullWidth=\"true\"\n          options={arr}\n          value={infoLichChieu.tenCumRap}\n          getOptionLabel={(option) => option}\n          //On change để khi người dùng thay đổi thông tin liền gọi hàm handleDispatchMovie để fetch dữ liệu về.\n          onChange={(event, newValue) => {\n            if (newValue == null) {\n              setInfoLichChieu({\n                ...infoLichChieu,\n                tenCumRap: \"\",\n              });\n              return;\n            }\n            setInfoLichChieu({\n              ...infoLichChieu,\n              tenCumRap: newValue,\n              maRap: \"\",\n            });\n            // findMaRap(newValue);\n          }}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              id=\"tenCumRap\"\n              label=\"Tên Cụm Rạp\"\n              variant=\"outlined\"\n            />\n          )}\n        />\n      );\n    } else {\n      return (\n        <Autocomplete\n          classes={classes}\n          fullWidth=\"true\"\n          value={infoLichChieu.tenCumRap}\n          options={[\"Vui lòng chọn cụm rạp\"]}\n          getOptionDisabled={(option) => true}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              id=\"tenCumRap\"\n              label=\"Tên Rạp\"\n              variant=\"outlined\"\n            />\n          )}\n        />\n      );\n    }\n  };\n\n  //Vì thằng autocomplete chỉ cho render mà tên hoặc mã k được render ra object.tên\n  //nên phải làm thêm 1 hàm để truy xuất khi có dữ liệu tên rạp thì trigger hàm\n  // tìm mã rạp\n  const findMaRap = (tenMaRap) => {\n    if (tenRap) {\n      let maRapContainer = tenRap.filter((rap) => {\n        return rap.tenCumRap === infoLichChieu.tenCumRap;\n      });\n      let maRapArr = maRapContainer[0].danhSachRap.filter((maRap) => {\n        return maRap.tenRap === tenMaRap;\n      });\n      setInfoLichChieu({\n        ...infoLichChieu,\n        tenMaRap,\n        maRap: maRapArr[0].maRap,\n      });\n    }\n  };\n\n  const renderTenMaRap = () => {\n    if (tenRap && infoLichChieu.tenCumRap !== \"\") {\n      let maRapContainer = tenRap.filter((rap) => {\n        return rap.tenCumRap === infoLichChieu.tenCumRap;\n      });\n      let maRapArr = maRapContainer[0].danhSachRap.map((maRap) => {\n        return maRap.tenRap;\n      });\n      return (\n        <Autocomplete\n          classes={classes}\n          fullWidth=\"true\"\n          options={maRapArr}\n          value={infoLichChieu.tenMaRap}\n          getOptionLabel={(option) => option}\n          //On change để khi người dùng thay đổi thông tin liền gọi hàm handleDispatchMovie để fetch dữ liệu về.\n          onChange={(event, newValue) => {\n            if (newValue == null) {\n              setInfoLichChieu({\n                ...infoLichChieu,\n                tenMaRap: \"\",\n              });\n              return;\n            }\n            // setInfoLichChieu({\n            //   ...infoLichChieu,\n            //   tenMaRap: newValue,\n            // });\n            findMaRap(newValue);\n          }}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              id=\"tenMaRap\"\n              label=\"Tên mã rạp\"\n              variant=\"outlined\"\n            />\n          )}\n        />\n      );\n    } else {\n      return (\n        <Autocomplete\n          classes={classes}\n          fullWidth=\"true\"\n          value={infoLichChieu.maRap}\n          options={[\"Vui lòng chọn cụm rạp và tên rạp\"]}\n          getOptionDisabled={(option) => true}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              id=\"tenMaRap\"\n              label=\"Tên mã rạp\"\n              variant=\"outlined\"\n            />\n          )}\n        />\n      );\n    }\n  };\n\n  let giaTienArr = [\"75000\", \"90000\", \"120000\", \"150000\"];\n\n  const renderGiaVe = () => {\n    return (\n      <Autocomplete\n        classes={classes}\n        fullWidth=\"true\"\n        value={infoLichChieu.giaVe}\n        options={giaTienArr}\n        getOptionLabel={(option) => option}\n        onChange={(event, newValue) => {\n          if (newValue == null) {\n            setInfoLichChieu({\n              ...infoLichChieu,\n              giaVe: \"\",\n            });\n            return;\n          }\n          setInfoLichChieu({\n            ...infoLichChieu,\n            giaVe: newValue,\n          });\n        }}\n        renderInput={(params) => (\n          <TextField {...params} id=\"giaVe\" label=\"Giá vé\" variant=\"outlined\" />\n        )}\n      />\n    );\n  };\n\n  return (\n    <div style={{ padding: \"1rem\" }}>\n      <Grid container spacing={3}>\n        <Grid item xs={4}>\n          {renderTenPhim()}\n        </Grid>\n        <Grid item xs={4}>\n          {renderTenMaRap()}\n        </Grid>\n      </Grid>\n      <Grid container spacing={3}>\n        <Grid item xs={4}>\n          {renderCumRap()}\n        </Grid>\n        <Grid item xs={4}>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDateTimePicker\n              inputVariant=\"outlined\"\n              fullWidth=\"true\"\n              ampm={false}\n              label=\"Suất chiếu\"\n              value={selectedDate}\n              onChange={handleDateChange}\n              onError={console.log}\n              disablePast\n              format=\"dd/MM/yyyy HH:mm:SS\"\n            />\n          </MuiPickersUtilsProvider>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3}>\n        <Grid item xs={4}>\n          {renderTenRap()}\n        </Grid>\n        <Grid item xs={4}>\n          {renderGiaVe()}\n        </Grid>\n      </Grid>\n      <Grid container spacing={3}>\n        <Grid item xs={8}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth\n            onClick={() => handleDispatchLichChieu()}\n          >\n            Tạo lịch chiếu\n          </Button>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default QuanLiLichChieu;\n"]},"metadata":{},"sourceType":"module"}